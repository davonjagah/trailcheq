/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateProduct(string,string,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteProduct(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductById(string)(string,string,string,string,string,bool,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductIdByIndex(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "productCount": {
          "type": "uint64",
          "key": "count"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TrailCheq",
    "desc": "",
    "methods": [
      {
        "name": "createProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "category",
            "type": "string"
          },
          {
            "name": "imageURL",
            "type": "string"
          },
          {
            "name": "owner",
            "type": "string"
          },
          {
            "name": "created",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "((string,string,string,string,string,bool,uint64,uint64),uint64)"
        }
      },
      {
        "name": "verifyProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          }
        ],
        "returns": {
          "type": "((string,string,string,string,string,bool,uint64,uint64),uint64)"
        }
      },
      {
        "name": "updateProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "updated",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getProductById",
        "args": [
          {
            "name": "productId",
            "type": "string"
          }
        ],
        "returns": {
          "type": "(string,string,string,string,string,bool,uint64,uint64)"
        }
      },
      {
        "name": "getProductIdByIndex",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the TrailCheq smart contract.
 */
export type TrailCheq = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)' | 'createProduct', {
      argsObj: {
        id: string
        name: string
        description: string
        category: string
        imageURL: string
        owner: string
        created: bigint | number
      }
      argsTuple: [id: string, name: string, description: string, category: string, imageURL: string, owner: string, created: bigint | number]
      returns: [[string, string, string, string, string, boolean, bigint, bigint], bigint]
    }>
    & Record<'verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)' | 'verifyProduct', {
      argsObj: {
        id: string
      }
      argsTuple: [id: string]
      returns: [[string, string, string, string, string, boolean, bigint, bigint], bigint]
    }>
    & Record<'updateProduct(string,string,string,uint64)void' | 'updateProduct', {
      argsObj: {
        id: string
        name: string
        description: string
        updated: bigint | number
      }
      argsTuple: [id: string, name: string, description: string, updated: bigint | number]
      returns: void
    }>
    & Record<'deleteProduct(string)void' | 'deleteProduct', {
      argsObj: {
        id: string
      }
      argsTuple: [id: string]
      returns: void
    }>
    & Record<'getProductById(string)(string,string,string,string,string,bool,uint64,uint64)' | 'getProductById', {
      argsObj: {
        productId: string
      }
      argsTuple: [productId: string]
      returns: [string, string, string, string, string, boolean, bigint, bigint]
    }>
    & Record<'getProductIdByIndex(uint64)string' | 'getProductIdByIndex', {
      argsObj: {
        index: bigint | number
      }
      argsTuple: [index: bigint | number]
      returns: string
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'count'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type TrailCheqSig = keyof TrailCheq['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends TrailCheqSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the TrailCheq smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends TrailCheqSig> = TrailCheq['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TrailCheq smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TrailCheqSig> = TrailCheq['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type TrailCheqCreateCalls = (typeof TrailCheqCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type TrailCheqCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type TrailCheqDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: TrailCheqCreateCalls) => TrailCheqCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class TrailCheqCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the TrailCheq smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProduct(args: MethodArgs<'createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.id, args.name, args.description, args.category, args.imageURL, args.owner, args.created],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verifyProduct(args: MethodArgs<'verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateProduct(string,string,string,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateProduct(args: MethodArgs<'updateProduct(string,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateProduct(string,string,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.id, args.name, args.description, args.updated],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteProduct(string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteProduct(args: MethodArgs<'deleteProduct(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteProduct(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.id],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProductById(string)(string,string,string,string,string,bool,uint64,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProductById(args: MethodArgs<'getProductById(string)(string,string,string,string,string,bool,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProductById(string)(string,string,string,string,string,bool,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProductIdByIndex(uint64)string ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProductIdByIndex(args: MethodArgs<'getProductIdByIndex(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProductIdByIndex(uint64)string' as const,
      methodArgs: Array.isArray(args) ? args : [args.index],
      ...params,
    }
  }
}

/**
 * A client to make calls to the TrailCheq smart contract
 */
export class TrailCheqClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `TrailCheqClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof TrailCheq['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the TrailCheq smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: TrailCheqDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(TrailCheqCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the TrailCheq smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(TrailCheqCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the TrailCheq smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProduct(args: MethodArgs<'createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrailCheqCallFactory.createProduct(args, params))
  }

  /**
   * Calls the verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verifyProduct(args: MethodArgs<'verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrailCheqCallFactory.verifyProduct(args, params))
  }

  /**
   * Calls the updateProduct(string,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateProduct(args: MethodArgs<'updateProduct(string,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrailCheqCallFactory.updateProduct(args, params))
  }

  /**
   * Calls the deleteProduct(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteProduct(args: MethodArgs<'deleteProduct(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrailCheqCallFactory.deleteProduct(args, params))
  }

  /**
   * Calls the getProductById(string)(string,string,string,string,string,bool,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProductById(args: MethodArgs<'getProductById(string)(string,string,string,string,string,bool,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrailCheqCallFactory.getProductById(args, params))
  }

  /**
   * Calls the getProductIdByIndex(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProductIdByIndex(args: MethodArgs<'getProductIdByIndex(uint64)string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrailCheqCallFactory.getProductIdByIndex(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<TrailCheq['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get count() {
        return TrailCheqClient.getIntegerState(state, 'count')
      },
    }
  }

  public compose(): TrailCheqComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createProduct(args: MethodArgs<'createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      verifyProduct(args: MethodArgs<'verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.verifyProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateProduct(args: MethodArgs<'updateProduct(string,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteProduct(args: MethodArgs<'deleteProduct(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProductById(args: MethodArgs<'getProductById(string)(string,string,string,string,string,bool,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProductById(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProductIdByIndex(args: MethodArgs<'getProductIdByIndex(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProductIdByIndex(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as TrailCheqComposer
  }
}
export type TrailCheqComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProduct(args: MethodArgs<'createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrailCheqComposer<[...TReturns, MethodReturn<'createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)'>]>

  /**
   * Calls the verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyProduct(args: MethodArgs<'verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrailCheqComposer<[...TReturns, MethodReturn<'verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)'>]>

  /**
   * Calls the updateProduct(string,string,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProduct(args: MethodArgs<'updateProduct(string,string,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrailCheqComposer<[...TReturns, MethodReturn<'updateProduct(string,string,string,uint64)void'>]>

  /**
   * Calls the deleteProduct(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteProduct(args: MethodArgs<'deleteProduct(string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrailCheqComposer<[...TReturns, MethodReturn<'deleteProduct(string)void'>]>

  /**
   * Calls the getProductById(string)(string,string,string,string,string,bool,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProductById(args: MethodArgs<'getProductById(string)(string,string,string,string,string,bool,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrailCheqComposer<[...TReturns, MethodReturn<'getProductById(string)(string,string,string,string,string,bool,uint64,uint64)'>]>

  /**
   * Calls the getProductIdByIndex(uint64)string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProductIdByIndex(args: MethodArgs<'getProductIdByIndex(uint64)string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrailCheqComposer<[...TReturns, MethodReturn<'getProductIdByIndex(uint64)string'>]>

  /**
   * Makes a clear_state call to an existing instance of the TrailCheq smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): TrailCheqComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): TrailCheqComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<TrailCheqComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<TrailCheqComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type TrailCheqComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type TrailCheqComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
