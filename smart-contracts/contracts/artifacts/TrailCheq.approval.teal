#pragma version 10
intcblock 1 0 64 2 6
bytecblock 0x70726f64756374 0x 0x636f756e74 0x151f7c75 0x6e6674 0x0008 0x00

// This TEAL was generated by TEALScript v0.105.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 4 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createProduct(uint64,string,string,string,string)void
*abi_route_createProduct:
	// owner: string
	txna ApplicationArgs 5
	extract 2 0

	// imageURL: string
	txna ApplicationArgs 4
	extract 2 0

	// description: string
	txna ApplicationArgs 3
	extract 2 0

	// name: string
	txna ApplicationArgs 2
	extract 2 0

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute createProduct(uint64,string,string,string,string)void
	callsub createProduct
	intc 0 // 1
	return

// createProduct(id: uint64, name: string, description: string, imageURL: string, owner: string): void
createProduct:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts/TrailCheq.algo.ts:24
	// assert(!this.products(id).exists)
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/TrailCheq.algo.ts:27
	// nftId = sendAssetCreation({
	//             configAssetTotal: 1,
	//             configAssetURL:  imageURL,
	//             configAssetUnitName: name,
	//             configAssetName: name,
	//            configAssetFreeze: this.app.address,
	//        })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/TrailCheq.algo.ts:28
	// configAssetTotal: 1
	intc 0 // 1
	itxn_field ConfigAssetTotal

	// contracts/TrailCheq.algo.ts:29
	// configAssetURL:  imageURL
	frame_dig -4 // imageURL: string
	itxn_field ConfigAssetURL

	// contracts/TrailCheq.algo.ts:30
	// configAssetUnitName: name
	frame_dig -2 // name: string
	itxn_field ConfigAssetUnitName

	// contracts/TrailCheq.algo.ts:31
	// configAssetName: name
	frame_dig -2 // name: string
	itxn_field ConfigAssetName

	// contracts/TrailCheq.algo.ts:32
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // nftId: uint64

	// contracts/TrailCheq.algo.ts:37
	// productInfo : ProductInfo = {
	//                   name: name,
	//                   description: description,
	//                   imageURL: imageURL,
	//                   owner: owner,
	//                   checked: false
	//             }
	bytec 1 //  initial head
	bytec 1 //  initial tail
	bytec 5 //  initial head offset
	frame_dig -2 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -4 // imageURL: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -5 // owner: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	bytec 6 // 0x00
	intc 1 // 0
	dup
	setbit
	callsub *process_static_tuple_element
	concat
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // productInfo: ProductInfo

	// contracts/TrailCheq.algo.ts:44
	// this.products(id).value = productInfo
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	dup
	box_del
	pop
	frame_dig 1 // productInfo: ProductInfo
	box_put

	// contracts/TrailCheq.algo.ts:45
	// this.productNFTs(id).value = nftId
	bytec 4 //  "nft"
	frame_dig -1 // id: uint64
	itob
	concat
	frame_dig 0 // nftId: uint64
	itob
	box_put

	// contracts/TrailCheq.algo.ts:48
	// this.productCount.value = this.productCount.value + 1
	bytec 2 //  "count"
	dup
	app_global_get
	intc 0 // 1
	+
	app_global_put
	retsub

// getProduct(uint64)((string,string,string,string,bool),uint64)
*abi_route_getProduct:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute getProduct(uint64)((string,string,string,string,bool),uint64)
	callsub getProduct
	concat
	log
	intc 0 // 1
	return

// getProduct(id: uint64): [ProductInfo, AssetID]
getProduct:
	proto 1 1

	// contracts/TrailCheq.algo.ts:53
	// assert(this.products(id).exists)
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:55
	// assert(!this.products(id).value.checked)
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 64
	getbit
	!
	assert

	// contracts/TrailCheq.algo.ts:57
	// this.products(id).value.checked = true
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 64
	intc 0 // 1
	setbit
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	dup
	box_del
	pop
	swap
	box_put

	// contracts/TrailCheq.algo.ts:58
	// return [
	//             this.products(id).value,
	//             this.productNFTs(id).value
	//         ];
	bytec 1 //  initial head
	bytec 1 //  initial tail
	pushbytes 0x000a // initial head offset
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.products(id).value
	assert
	callsub *process_dynamic_tuple_element
	bytec 4 //  "nft"
	frame_dig -1 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.productNFTs(id).value
	assert
	btoi
	itob
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	retsub

// updateProduct(uint64,string,string)void
*abi_route_updateProduct:
	// description: string
	txna ApplicationArgs 3
	extract 2 0

	// name: string
	txna ApplicationArgs 2
	extract 2 0

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateProduct(uint64,string,string)void
	callsub updateProduct
	intc 0 // 1
	return

// updateProduct(id: uint64, name: string, description: string): void
updateProduct:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/TrailCheq.algo.ts:66
	// assert(this.products(id).exists)
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:70
	// productInfo : ProductInfo = {
	//                   name: name,
	//                   description: description,
	//                   imageURL: this.products(id).value.imageURL,
	//                   owner: this.products(id).value.owner,
	//                   checked: this.products(id).value.checked
	//             }
	bytec 1 //  initial head
	bytec 1 //  initial tail
	bytec 5 //  initial head offset
	frame_dig -2 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	pushint 4
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	intc 4 // 6
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 3 // 2
	+ // add two for length
	extract3
	extract 2 0
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	bytec 6 // 0x00
	intc 1 // 0
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	load 255 // full array
	intc 2 // 64
	getbit
	setbit
	callsub *process_static_tuple_element
	concat
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // productInfo: ProductInfo

	// contracts/TrailCheq.algo.ts:77
	// this.products(id).value = productInfo
	bytec 0 //  "product"
	frame_dig -1 // id: uint64
	itob
	concat
	dup
	box_del
	pop
	frame_dig 0 // productInfo: ProductInfo
	box_put
	retsub

// getProductCount()uint64
*abi_route_getProductCount:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// execute getProductCount()uint64
	callsub getProductCount
	itob
	concat
	log
	intc 0 // 1
	return

// getProductCount(): uint64
getProductCount:
	proto 0 1

	// contracts/TrailCheq.algo.ts:82
	// return this.productCount.value;
	bytec 2 //  "count"
	app_global_get
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x244312f2 // method "createProduct(uint64,string,string,string,string)void"
	pushbytes 0x2283250f // method "getProduct(uint64)((string,string,string,string,bool),uint64)"
	pushbytes 0xc211d771 // method "updateProduct(uint64,string,string)void"
	pushbytes 0xf2d99e14 // method "getProductCount()uint64"
	txna ApplicationArgs 0
	match *abi_route_createProduct *abi_route_getProduct *abi_route_updateProduct *abi_route_getProductCount

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub