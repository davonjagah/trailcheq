#pragma version 10
intcblock 1 0 2 6 4 80
bytecblock 0x70726f64756374 0x 0x636f756e74 0x151f7c75 0x6b657973 0x6e6674 0x000a

// This TEAL was generated by TEALScript v0.105.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)
*abi_route_createProduct:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// created: uint64
	txna ApplicationArgs 7
	btoi

	// owner: string
	txna ApplicationArgs 6
	extract 2 0

	// imageURL: string
	txna ApplicationArgs 5
	extract 2 0

	// category: string
	txna ApplicationArgs 4
	extract 2 0

	// description: string
	txna ApplicationArgs 3
	extract 2 0

	// name: string
	txna ApplicationArgs 2
	extract 2 0

	// id: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)
	callsub createProduct
	concat
	log
	intc 0 // 1
	return

// createProduct(id: string, name: string, description: string, category: string, imageURL: string, owner: string, created: uint64): [ProductInfo, AssetID]
createProduct:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// contracts/TrailCheq.algo.ts:32
	// assert(!this.products(id).exists)
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts/TrailCheq.algo.ts:35
	// nftId = sendAssetCreation({
	//                     configAssetTotal: 1,
	//                     configAssetURL: imageURL,
	//                     configAssetUnitName: name,
	//                     configAssetName: name,
	//                     configAssetFreeze: this.app.address,
	//                 })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/TrailCheq.algo.ts:36
	// configAssetTotal: 1
	intc 0 // 1
	itxn_field ConfigAssetTotal

	// contracts/TrailCheq.algo.ts:37
	// configAssetURL: imageURL
	frame_dig -5 // imageURL: string
	itxn_field ConfigAssetURL

	// contracts/TrailCheq.algo.ts:38
	// configAssetUnitName: name
	frame_dig -2 // name: string
	itxn_field ConfigAssetUnitName

	// contracts/TrailCheq.algo.ts:39
	// configAssetName: name
	frame_dig -2 // name: string
	itxn_field ConfigAssetName

	// contracts/TrailCheq.algo.ts:40
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // nftId: uint64

	// contracts/TrailCheq.algo.ts:43
	// productInfo : ProductInfo = {
	//                   name: name,
	//                   description: description,
	//                   imageURL: imageURL,
	//                   category: category,
	//                   owner: owner,
	//                   checked: false,
	//                   createdTimeStamp: created,
	//                   updatedTimeStamp: 0
	//             }
	bytec 1 //  initial head
	bytec 1 //  initial tail
	pushbytes 0x001b // initial head offset
	frame_dig -2 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -4 // category: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -5 // imageURL: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -6 // owner: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pushbytes 0x00
	intc 1 // 0
	dup
	setbit
	callsub *process_static_tuple_element
	frame_dig -7 // created: uint64
	itob
	callsub *process_static_tuple_element
	pushbytes 0x0000000000000000
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // productInfo: ProductInfo

	// contracts/TrailCheq.algo.ts:53
	// this.products(id).value = productInfo
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	dup
	box_del
	pop
	frame_dig 1 // productInfo: ProductInfo
	box_put

	// contracts/TrailCheq.algo.ts:54
	// this.productNFTs(id).value = nftId
	bytec 5 //  "nft"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	frame_dig 0 // nftId: uint64
	itob
	box_put

	// contracts/TrailCheq.algo.ts:56
	// this.productKeys(this.productCount.value).value = id
	bytec 4 //  "keys"
	bytec 2 //  "count"
	app_global_get
	itob
	concat
	dup
	box_del
	pop
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/TrailCheq.algo.ts:59
	// this.productCount.value += 1
	bytec 2 //  "count"
	app_global_get
	intc 0 // 1
	+
	bytec 2 //  "count"
	swap
	app_global_put

	// contracts/TrailCheq.algo.ts:61
	// return [
	//                         productInfo,
	//                         nftId
	//                 ]
	bytec 1 //  initial head
	bytec 1 //  initial tail
	bytec 6 //  initial head offset
	frame_dig 1 // productInfo: ProductInfo
	callsub *process_dynamic_tuple_element
	frame_dig 0 // nftId: uint64
	itob
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)
*abi_route_verifyProduct:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// id: string
	txna ApplicationArgs 1
	extract 2 0

	// execute verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)
	callsub verifyProduct
	concat
	log
	intc 0 // 1
	return

// verifyProduct(id: string): [ProductInfo, AssetID]
verifyProduct:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/TrailCheq.algo.ts:72
	// assert(this.products(id).exists)
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:73
	// assert(!this.products(id).value.checked)
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 80
	getbit
	!
	assert

	// contracts/TrailCheq.algo.ts:76
	// productInfo = this.products(id).value
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	frame_bury 0 // storage key//productInfo

	// contracts/TrailCheq.algo.ts:77
	// productInfo.checked = true
	frame_dig 0 // storage key//productInfo
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	load 255 // full array
	intc 5 // 80
	intc 0 // 1
	setbit
	frame_dig 0 // storage key//productInfo
	dup
	box_del
	pop
	swap
	box_put

	// contracts/TrailCheq.algo.ts:78
	// this.products(id).value = productInfo
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	dup
	box_del
	pop
	frame_dig 0 // storage key//productInfo
	box_get

	// box value does not exist: this.products(id).value
	assert
	box_put

	// contracts/TrailCheq.algo.ts:80
	// return [productInfo, this.productNFTs(id).value];
	bytec 1 //  initial head
	bytec 1 //  initial tail
	bytec 6 //  initial head offset
	frame_dig 0 // storage key//productInfo
	box_get

	// box value does not exist: this.products(id).value
	assert
	callsub *process_dynamic_tuple_element
	bytec 5 //  "nft"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_get

	// box value does not exist: this.productNFTs(id).value
	assert
	btoi
	itob
	callsub *process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail

	// set the subroutine return value
	frame_bury 0
	retsub

// updateProduct(string,string,string,uint64)void
*abi_route_updateProduct:
	// updated: uint64
	txna ApplicationArgs 4
	btoi

	// description: string
	txna ApplicationArgs 3
	extract 2 0

	// name: string
	txna ApplicationArgs 2
	extract 2 0

	// id: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateProduct(string,string,string,uint64)void
	callsub updateProduct
	intc 0 // 1
	return

// updateProduct(id: string, name: string, description: string, updated: uint64): void
updateProduct:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts/TrailCheq.algo.ts:88
	// assert(this.products(id).exists)
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:91
	// productInfo = this.products(id).value
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	frame_bury 0 // storage key//productInfo

	// contracts/TrailCheq.algo.ts:92
	// productInfo.name = name
	frame_dig 0 // storage key//productInfo
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	intc 1 // 0
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 1 // 0
	load 254 // element start
	substring3
	frame_dig -2 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 250 // length difference
	load 251 // element head offset
	intc 2 // 2
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	intc 4 // 4
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	intc 3 // 6
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	pushint 8
	+ // head ofset
	callsub *update_dynamic_head
	load 255 // full array
	frame_dig 0 // storage key//productInfo
	dup
	box_del
	pop
	swap
	box_put

	// contracts/TrailCheq.algo.ts:93
	// productInfo.description = description
	frame_dig 0 // storage key//productInfo
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	intc 2 // 2
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 1 // 0
	load 254 // element start
	substring3
	frame_dig -3 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 250 // length difference
	load 251 // element head offset
	intc 2 // 2
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	intc 4 // 4
	+ // head ofset
	callsub *update_dynamic_head
	load 250 // length difference
	load 251 // element head offset
	intc 3 // 6
	+ // head ofset
	callsub *update_dynamic_head
	load 255 // full array
	frame_dig 0 // storage key//productInfo
	dup
	box_del
	pop
	swap
	box_put

	// contracts/TrailCheq.algo.ts:94
	// productInfo.updatedTimeStamp = updated
	frame_dig 0 // storage key//productInfo
	box_get

	// box value does not exist: this.products(id).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 19
	frame_dig -4 // updated: uint64
	itob
	replace3
	frame_dig 0 // storage key//productInfo
	dup
	box_del
	pop
	swap
	box_put

	// contracts/TrailCheq.algo.ts:96
	// this.products(id).value = productInfo
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	dup
	box_del
	pop
	frame_dig 0 // storage key//productInfo
	box_get

	// box value does not exist: this.products(id).value
	assert
	box_put
	retsub

// deleteProduct(string)void
*abi_route_deleteProduct:
	// id: string
	txna ApplicationArgs 1
	extract 2 0

	// execute deleteProduct(string)void
	callsub deleteProduct
	intc 0 // 1
	return

// deleteProduct(id: string): void
deleteProduct:
	proto 1 0

	// contracts/TrailCheq.algo.ts:104
	// assert(this.products(id).exists)
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:107
	// this.products(id).delete()
	bytec 0 //  "product"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_del

	// contracts/TrailCheq.algo.ts:108
	// this.productNFTs(id).delete()
	bytec 5 //  "nft"
	frame_dig -1 // id: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_del

	// contracts/TrailCheq.algo.ts:109
	// this.productKeys(this.productCount.value - 1).delete()
	bytec 4 //  "keys"
	bytec 2 //  "count"
	app_global_get
	intc 0 // 1
	-
	itob
	concat
	box_del

	// contracts/TrailCheq.algo.ts:112
	// this.productCount.value -= 1
	bytec 2 //  "count"
	app_global_get
	intc 0 // 1
	-
	bytec 2 //  "count"
	swap
	app_global_put
	retsub

// getProductById(string)(string,string,string,string,string,bool,uint64,uint64)
*abi_route_getProductById:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// productId: string
	txna ApplicationArgs 1
	extract 2 0

	// execute getProductById(string)(string,string,string,string,string,bool,uint64,uint64)
	callsub getProductById
	concat
	log
	intc 0 // 1
	return

// getProductById(productId: string): ProductInfo
getProductById:
	proto 1 1

	// contracts/TrailCheq.algo.ts:117
	// assert(this.products(productId).exists)
	bytec 0 //  "product"
	frame_dig -1 // productId: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:118
	// return this.products(productId).value;
	bytec 0 //  "product"
	frame_dig -1 // productId: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	box_get

	// box value does not exist: this.products(productId).value
	assert
	retsub

// getProductIdByIndex(uint64)string
*abi_route_getProductIdByIndex:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// index: uint64
	txna ApplicationArgs 1
	btoi

	// execute getProductIdByIndex(uint64)string
	callsub getProductIdByIndex
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// getProductIdByIndex(index: uint64): string
getProductIdByIndex:
	proto 1 1

	// contracts/TrailCheq.algo.ts:123
	// assert(index < this.productCount.value)
	frame_dig -1 // index: uint64
	bytec 2 //  "count"
	app_global_get
	<
	assert

	// contracts/TrailCheq.algo.ts:124
	// return this.productKeys(index).value;
	bytec 4 //  "keys"
	frame_dig -1 // index: uint64
	itob
	concat
	box_get

	// box value does not exist: this.productKeys(index).value
	assert
	extract 2 0
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd8037c27 // method "createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)"
	pushbytes 0x7a31f981 // method "verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)"
	pushbytes 0xebb6f876 // method "updateProduct(string,string,string,uint64)void"
	pushbytes 0x38bee38c // method "deleteProduct(string)void"
	pushbytes 0x1fb11412 // method "getProductById(string)(string,string,string,string,string,bool,uint64,uint64)"
	pushbytes 0x05efbb91 // method "getProductIdByIndex(uint64)string"
	txna ApplicationArgs 0
	match *abi_route_createProduct *abi_route_verifyProduct *abi_route_updateProduct *abi_route_deleteProduct *abi_route_getProductById *abi_route_getProductIdByIndex

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 255 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 249 // subtract head difference
	bz *subtract_head_difference
	+ // add difference to offset
	b *end_calc_new_head

*subtract_head_difference:
	swap
	- // subtract difference from offet

*end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 255 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 255 // full array
	retsub

*get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz *swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	intc 0 // 1
	store 249 // subtract head difference
	b *get_difference

*swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	intc 1 // 0
	store 249 // subtract head difference

*get_difference:
	- // get length difference
	store 250 // length difference
	retsub