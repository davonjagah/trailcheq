#pragma version 10
intcblock 1
bytecblock 0x636f756e74 0x151f7c75 0x7c 0x

// This TEAL was generated by TEALScript v0.105.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createProduct(uint64,string,string)void
*abi_route_createProduct:
	// description: string
	txna ApplicationArgs 3
	extract 2 0

	// name: string
	txna ApplicationArgs 2
	extract 2 0

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute createProduct(uint64,string,string)void
	callsub createProduct
	intc 0 // 1
	return

// createProduct(id: uint64, name: string, description: string): void
createProduct:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts/TrailCheq.algo.ts:15
	// assert(!this.products(id).exists)
	frame_dig -1 // id: uint64
	itob
	box_len
	swap
	pop
	!
	assert

	// contracts/TrailCheq.algo.ts:18
	// productInfo = name + "|" + description
	frame_dig -2 // name: string
	bytec 2 //  "|"
	concat
	frame_dig -3 // description: string
	concat
	frame_bury 0 // productInfo: byte[]

	// contracts/TrailCheq.algo.ts:19
	// this.products(id).value = productInfo
	frame_dig -1 // id: uint64
	itob
	dup
	box_del
	pop
	frame_dig 0 // productInfo: byte[]
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/TrailCheq.algo.ts:22
	// this.productCount.value = this.productCount.value + 1
	bytec 0 //  "count"
	dup
	app_global_get
	intc 0 // 1
	+
	app_global_put
	retsub

// getProduct(uint64)string
*abi_route_getProduct:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute getProduct(uint64)string
	callsub getProduct
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// getProduct(id: uint64): string
getProduct:
	proto 1 1

	// contracts/TrailCheq.algo.ts:27
	// assert(this.products(id).exists)
	frame_dig -1 // id: uint64
	itob
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:28
	// return this.products(id).value;
	frame_dig -1 // id: uint64
	itob
	box_get

	// box value does not exist: this.products(id).value
	assert
	extract 2 0
	retsub

// updateProduct(uint64,string,string)void
*abi_route_updateProduct:
	// description: string
	txna ApplicationArgs 3
	extract 2 0

	// name: string
	txna ApplicationArgs 2
	extract 2 0

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute updateProduct(uint64,string,string)void
	callsub updateProduct
	intc 0 // 1
	return

// updateProduct(id: uint64, name: string, description: string): void
updateProduct:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts/TrailCheq.algo.ts:33
	// assert(this.products(id).exists)
	frame_dig -1 // id: uint64
	itob
	box_len
	swap
	pop
	assert

	// contracts/TrailCheq.algo.ts:36
	// productInfo = name + "|" + description
	frame_dig -2 // name: string
	bytec 2 //  "|"
	concat
	frame_dig -3 // description: string
	concat
	frame_bury 0 // productInfo: byte[]

	// contracts/TrailCheq.algo.ts:37
	// this.products(id).value = productInfo
	frame_dig -1 // id: uint64
	itob
	dup
	box_del
	pop
	frame_dig 0 // productInfo: byte[]
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put
	retsub

// getProductCount()uint64
*abi_route_getProductCount:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute getProductCount()uint64
	callsub getProductCount
	itob
	concat
	log
	intc 0 // 1
	return

// getProductCount(): uint64
getProductCount:
	proto 0 1

	// contracts/TrailCheq.algo.ts:42
	// return this.productCount.value;
	bytec 0 //  "count"
	app_global_get
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x82c0c6d6 // method "createProduct(uint64,string,string)void"
	pushbytes 0x86e12368 // method "getProduct(uint64)string"
	pushbytes 0xc211d771 // method "updateProduct(uint64,string,string)void"
	pushbytes 0xf2d99e14 // method "getProductCount()uint64"
	txna ApplicationArgs 0
	match *abi_route_createProduct *abi_route_getProduct *abi_route_updateProduct *abi_route_getProductCount

	// this contract does not implement the given ABI method for call NoOp
	err