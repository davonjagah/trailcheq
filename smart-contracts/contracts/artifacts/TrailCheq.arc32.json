{
  "hints": {
    "createProduct(string,string,string,string,string,string,uint64)((string,string,string,string,string,bool,uint64,uint64),uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyProduct(string)((string,string,string,string,string,bool,uint64,uint64),uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateProduct(string,string,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteProduct(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductById(string)(string,string,string,string,string,bool,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductIdByIndex(uint64)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "productCount": {
          "type": "uint64",
          "key": "count"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TrailCheq",
    "desc": "",
    "methods": [
      {
        "name": "createProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "category",
            "type": "string"
          },
          {
            "name": "imageURL",
            "type": "string"
          },
          {
            "name": "owner",
            "type": "string"
          },
          {
            "name": "created",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "((string,string,string,string,string,bool,uint64,uint64),uint64)"
        }
      },
      {
        "name": "verifyProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          }
        ],
        "returns": {
          "type": "((string,string,string,string,string,bool,uint64,uint64),uint64)"
        }
      },
      {
        "name": "updateProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "updated",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteProduct",
        "args": [
          {
            "name": "id",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getProductById",
        "args": [
          {
            "name": "productId",
            "type": "string"
          }
        ],
        "returns": {
          "type": "(string,string,string,string,string,bool,uint64,uint64)"
        }
      },
      {
        "name": "getProductIdByIndex",
        "args": [
          {
            "name": "index",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}