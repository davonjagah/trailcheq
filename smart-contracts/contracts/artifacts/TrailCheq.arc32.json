{
  "hints": {
    "createProduct(uint64,string,string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProduct(uint64)((string,string,string,string,bool),uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateProduct(uint64,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductCount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "productCount": {
          "type": "uint64",
          "key": "count"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBjb250cmFjdHMvVHJhaWxDaGVxLmFsZ28udHM6ODcKLy8gdGhpcy5wcm9kdWN0Q291bnQudmFsdWUgPSAwCnB1c2hieXRlcyAweDYzNmY3NTZlNzQgLy8gImNvdW50IgpwdXNoaW50IDAKYXBwX2dsb2JhbF9wdXQKcHVzaGludCAxCnJldHVybg=="
  },
  "contract": {
    "name": "TrailCheq",
    "desc": "",
    "methods": [
      {
        "name": "createProduct",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "imageURL",
            "type": "string"
          },
          {
            "name": "owner",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getProduct",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "((string,string,string,string,bool),uint64)"
        }
      },
      {
        "name": "updateProduct",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getProductCount",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}